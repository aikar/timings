#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    util = require('util'),
    console = require('console');

var bless = require('../lib/bless');
var args = process.argv.slice(1);
var options = {
    cacheBuster: true,
    cleanup: true,
    compress: false,
    force: false,
    imports: true
};

args = args.filter(function (arg) {
    var match = arg.match(/^--?([a-z][0-9a-z-]*)(?:=([^\s]+))?$/i);

    if (match) {
        arg = match[1];
    } else {
        return arg;
    }

    switch (arg) {
        case 'v':
        case 'version':
            console.log('blessc ' + bless.version.join('.') + ' (CSS Post-Processor) [JavaScript]');
            process.exit(0);
        case 'h':
        case 'help':
            console.log('Usage: blessc [options] [ source | - ] [destination]');
            console.log('');
            console.log('Options :');
            console.log('  -v, --version      print version');
            console.log('  -h, --help         print this help');
            console.log('  -f, --force        overwrite input file');
            console.log('  -x, --compress     "minify" @import');
            console.log('  --no-cleanup       don\'t remove old css file before overwriting');
            console.log('  --no-imports       disable @import on stylesheets');
            console.log('  --no-cache-buster  turn off the cache buster');
            console.log('');
            console.log('Full documentation can be found at http://blesscss.com/');
            process.exit(0);
        case 'x':
        case 'compress':
            options.compress = true;
            break;
        case 'no-cleanup':
            options.cleanup = false;
            break;
        case 'f':
        case 'force':
            options.force = true;
            break;
        case 'no-imports':
            options.imports = false;
            break;
        case 'no-cache-buster':
            options.cacheBuster = false;
    }
});

var input = args[1];
if (input && input[0] != '/' && input != '-') {
    input = path.join(process.cwd(), input);
}
var output = args[2];
if (output && output[0] != '/') {
    output = path.join(process.cwd(), output);
}

if (!input) {
    console.log('blessc: no input file');
    process.exit(1);
}

if (input != '-' && ! /\.css/.test(input)) {
    console.log('blessc: input file not a .css file');
    process.exit(1);
}

output = output || input;

if (output == '-') {
    console.log('blessc: no output file');
    process.exit(1);
}

if (output == input && ! options.force) {
    console.log('blessc: use --force or -f to modify input file');
    process.exit(1);
}

function noun(noun, variable) {
    if (variable != 1) {
        noun += 's';
    }
    return noun;
}

function formatNumber (nStr) {
    nStr += '';
    var x = nStr.split('.');
    var x1 = x[0];
    var x2 = x.length > 1 ? '.' + x[1] : '';

    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }

    return x1 + x2;
}


var parseCss = function (e, data) {
    if (e) {
        console.log('blessc: ' + e.message);
        process.exit(1);
    }

    new (bless.Parser)({
        output: output,
        options: options
    }).parse(data, function (err, files, numSelectors) {
        if (err) {
            throw err;
            process.exit(1);
        } else {
            try {
                var selectorNoun = noun('selector', numSelectors);
                numSelectors = formatNumber(numSelectors);
                var message = 'Source CSS file contained ' + numSelectors + ' ' + selectorNoun + '.',
                    numFiles = files.length,
                    fileNoun = noun('file', numFiles);

                if(numFiles > 1 || input != output) {
                    for (var i in files) {
                        var file = files[i],
                            fd = fs.openSync(file.filename, 'w');
                        fs.writeSync(fd, file.content, 0, 'utf8');
                    }

                    message += ' ' + numFiles + ' CSS ' + fileNoun + ' created.';
                } else {
                    message += ' No changes made.';
                }


                bless.Parser.cleanup(options, output, function(err, files) {
                    if (err) {
                        throw err;
                        process.exit(1);
                    } else {
                        var oldVerb;

                        for (var i in files) {
                            var file = files[i];

                            if(! options.cleanup) {
                                oldVerb = 'renamed';
                                var ext = path.extname(file),
                                    dest = file.replace(ext, '-old' + ext),
                                    read = fs.createReadStream(file),
                                    write = fs.createWriteStream(dest);

                                read.on('end', function (err) {
                                    if (err) {
                                        throw err;
                                        process.exit(1);
                                    }
                                });

                                util.pump(read, write);
                            } else {
                                oldVerb = 'removed';
                            }

                            fs.unlink(files[i], function (err) {
                                if (err) {
                                    throw err;
                                    process.exit(1);
                                }
                            });
                        }

                        var numOld = files.length;

                        if (numOld > 0) {
                            var removedFileNoun = noun('file', numOld);
                            message += ' Additional CSS ' + removedFileNoun + ' no longer needed. ' + numOld + ' additional ' + removedFileNoun + ' ' + oldVerb + '.';
                        }

                        console.log('blessc: ' + message);
                    }
                });

            } catch (e) {
                throw e;
                process.exit(2);
            }
        }
    });
};

if (input != '-') {
    fs.readFile(input, 'utf-8', parseCss);
} else {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');

    var buffer = '';
    process.stdin.on('data', function(data) {
        buffer += data;
    });

    process.stdin.on('end', function() {
        parseCss(false, buffer);
    });
}
